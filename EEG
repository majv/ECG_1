%% Espectro de potencia
data1 = load('Dani ruido 1 min.mat');
data2 = load('Dani sentada.mat');

Pdata1 = (data1.data(:, 4))';
Pdata2 = (data2.data(:, 4))';

FS = 1000; 
figure;

% Espectro dani ruido
subplot(2, 1, 1);
[var, f1] = pwelch(Pdata1, [], [], [], FS);
plot(f1, 10*log10(var));
title('Espectro Dani ruido');
xlabel('Frecuencia (Hz)');
ylabel('Potencia (dB)');
grid on;

% Espectro dani sentada
subplot(2, 1, 2);
[var2, f2] = pwelch(Pdata2, [], [], [], FS);
plot(f2, 10*log10(var2));
title('Espectro  Dani sentada');
xlabel('Frecuencia (Hz)');
ylabel('Potencia (dB)');
grid on;

%% Ojos abiertos y cerrados 
fs = 500; 
duracion = fs * 10;
datos = load('Abrir_Cerrar.mat');
senal = (datos.data(:, 4))';

num = floor(length(senal) / duracion);
j = 1;
k = 1;

for i = 1:num
  
    inicio = (i - 1) * duracion + 1;
    fin = i * duracion;
    segmento = senal(inicio:fin);

   
    L = length(segmento);
    Y = fft(segmento);
    P2 = abs(Y / L);
    P1 = P2(1:L/2+1);
    frecuencias = fs * (0:(L/2)) / L;

    [~, f7] = min(abs(frecuencias - 7));
    [~, f13] = min(abs(frecuencias - 13));

 
    frec = frecuencias(f7:f13);
    amplitud = P1(f7:f13);

  
    if i == 2
        figure;
        plot(frecuencias, P1, 'b', 'LineWidth', 1.5);
        hold on;
       xlim([6 15]);
       ylim([0 .1]);
       
        fill([frec, flip(frec)], [amplitud, zeros(size(amplitud))], 'r', 'FaceAlpha', 0.3);
        xlabel('Frecuencia (Hz)');
        ylabel('Potencia (dB)');
        title('Espectro de ojos cerrados');
    end

 
    area = trapz(frec, amplitud);
    if mod(i, 2) == 0
        abiertos(k) = area;
        k = k + 1;
    else
        cerrados(j) = area;
        j = j + 1;
    end
end

figure;
boxplot([abiertos', cerrados'], {'C1', 'C2'});
title('Diagrama de Cajas para Área bajo la Curva en Rango Alpha (7-13 Hz)');
ylabel('Área bajo la curva alpha');

%% TF
data4 = load('Abrir_Cerrar.mat');
Pdata41 = (data4.data(:, 1))';
Pdata42 = (data4.data(:, 2))';
Pdata43 = (data4.data(:, 3))';
Pdata44 = (data4.data(:, 4))';
fm = 500;

figure;
% Canal 1
subplot(4, 1, 1);
stft(Pdata41, fm, 'Window', hann(128, 'periodic'), 'OverlapLength', 110, 'FFTLength', 512);
title('Canal 1');
colorbar;
ylim([-60 60])

% Canal 2
subplot(4, 1, 2);
stft(Pdata42, fm, 'Window', hann(128, 'periodic'), 'OverlapLength', 110, 'FFTLength', 512);
title('Canal 2');
colorbar;
ylim([-60 60])

% Canal 3
subplot(4, 1, 3);
stft(Pdata43, fm, 'Window', hann(128, 'periodic'), 'OverlapLength', 110, 'FFTLength', 512);
title('Canal 3');
colorbar;
ylim([-60 60])

% Canal 4
subplot(4, 1, 4);
stft(Pdata44, fm, 'Window', hann(128, 'periodic'), 'OverlapLength', 110, 'FFTLength', 512);
title('Canal 4');
colorbar;
ylim([-60 60])


%% Telefono
% Permite analizar cómo las frecuencias de una señal cambian a lo largo del tiempo, generando un espectrograma que muestra la intensidad de cada frecuencia en función del tiempo.
[y, F] = audioread('number.wav');  

%  window controla cómo se divide la señal en segmentos para aplicar la STFT a cada uno de ellos.
%solapamiento entre ventanas ayuda a suavizar la transición entre
%segmentos. 75 menor ruid
%define el número de puntos en la Transformada Discreta de Fourier (DFT) para cada segmento de la STFT, lo que afecta la resolución de frecuencia.

figure;
[S, F, T]=stft(y, F, 'Window',hann(128, 'periodic'), 'OverlapLength', 110, 'FFTLength', 128);
dB = 20 * log10(abs(S));
imagesc(T, F, dB);
ylim([-4000 0]);  

title('Espectrograma de la señal de audio');
xlabel('Tiempo (s)');
ylabel('Frecuencia (Hz)');
colorbar;
